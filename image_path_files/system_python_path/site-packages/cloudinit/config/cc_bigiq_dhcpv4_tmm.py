#!/usr/bin/env python

# coding=utf-8
# pylint: disable=broad-except,unused-argument,line-too-long
# Copyright (c) 2016-2018, F5 Networks, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
"""
This module reads metadata from DHCPv4 requests made on TMM interfaces.

The module must be enabled in the userdata YAML to perform any
onboarding artifact generation or onboarding.

#cloud-config
bigiq_dhcpv4_tmm:
  enabled: True

This module will also look for YAML metadata which typically
is handled by the cc_ssh.py module:

#cloud-config
ssh_authorized_keys:
  - ssh-rsa [key]
  - ssh-rsa [key]

The standard cloud-init cc_ssh.py module alters SELinux
configurations which may not be compatible with TMOS

Additional attributes supported in the YAML declaration
include

rd_enabled - Route domain decoration support, defaults to True.

device_discovery_interface - implicitly define the device discovery interface.

default_route_interface - implicitly defint the TMOS default route interface.

#cloud-config
tmos_dhcpv4_tmm:
  enabled: True
  rd_enabled: False
  do_enabled: True
  device_discovery_interface: 1.1
  default_route_interface: 1.1

"""
import logging
import os
import subprocess
import time

from cloudinit import bigiq_onboard_utils

# constants
MODULE_NAME = 'bigiq_dhcpv4_tmm'

OUT_DIR = '/var/lib/cloud/' + MODULE_NAME
EXEC_DIR = '/opt/cloud/' + MODULE_NAME

TMSH_CMD_FILE_DIR = EXEC_DIR + '/initscripts/all'
POST_ONBOARD_CMD_FILE_DIR = EXEC_DIR + '/initscripts/post'

LOG_FILE = '/var/log/f5-cloudinit.log'

PRE_ONBOARD_COMPLETE_FLAG_FILE = OUT_DIR + '/PRE_ONBOARD_COMPLETE'
ONBOARD_COMPLETE_FLAG_FILE = OUT_DIR + '/ONBOARD_COMPLETE'
POST_ONBOARD_FLAG_FILE = OUT_DIR + '/POST_ONBOARD_COMPLETE'

DEFAULT_DNS_SERVERS = ['8.8.8.8', '8.8.4.4']
DEFAULT_NTP_SERVERS = ['0.pool.ntp.org', '1.pool.ntp.org']
DEFAULT_TIMEZONE = 'UTC'
DEFAULT_DEVICE_DISCOVERY_INTERFACE = '1.1'

REMOVE_METADATA_FILES = False

ONBOARD_TIMEOUT = 120

ERROR = 'ERROR'
SUCCESS = 'SUCCESS'

bigiq_onboard_utils.touch_file(LOG_FILE)

LOG = logging.getLogger(MODULE_NAME)
LOG.setLevel(logging.DEBUG)
FORMATTER = logging.Formatter(
    '%(asctime)s - %(name)s - %(levelname)s - %(message)s')
LOGFILE = logging.FileHandler(LOG_FILE)
LOGFILE.setLevel(logging.DEBUG)
LOGFILE.setFormatter(FORMATTER)
LOG.addHandler(LOGFILE)


def tmsh_cmd_dir_exists():
    """Ensures TMSH generated init script directory exists"""
    if not os.path.isdir(TMSH_CMD_FILE_DIR):
        os.makedirs(TMSH_CMD_FILE_DIR)
    if not os.path.isdir(POST_ONBOARD_CMD_FILE_DIR):
        os.makedirs(POST_ONBOARD_CMD_FILE_DIR)
    if not os.path.isdir(OUT_DIR):
        os.makedirs(OUT_DIR)


# inject discovered SSH keys, we don't use the ssh_keys cloud-init module
# because it uses SELinuxGuard, which we don't know will always be
# safe with TMOS versions
def inject_public_ssh_keys(log, keys):
    """Injects discovered and metadata supplied SSH keys into the root account"""
    LOG.debug('injecting root SSH keys')
    if not keys:
        keys = []
    try:
        bigiq_onboard_utils.inject_public_ssh_keys(keys)
    except Exception as err:
        LOG.error('exception in injecting SSH keys: %s', err)


def initialize_do_declaration():
    """Returns the f5-declarative-onboarding declaration header items"""
    LOG.debug('intializing f5-declarative-onboarding declaration')
    return {
        'schemaVersion': "1.0.0",
        'class': 'Device',
        'async': True,
        'label': 'generated from DHCPv4 metadata',
        'Common': {
            'class': 'Tenant'
        }
    }


def get_linux_interfaces():
    """Return a list of linux link device names"""
    if bigiq_onboard_utils.is_tmm():
        bigiq_onboard_utils.stop_tmm()
    interfaces = subprocess.Popen(
        "ip link | egrep 'eth[1-9]' | cut -d':' -f2 | tr -d ' '",
        stdout=subprocess.PIPE, shell=True
    ).communicate()[0].split('\n')
    return interfaces


def resolve_resources(rd_enabled=True, default_route_interface=None,
                      device_discovery_interface=None, inject_routes=True,
                      dhcp_timeout=120):
    """Resolve the resource provisioning dataset from metadata"""
    do_declaration = None
    if default_route_interface:
        LOG.debug('default_route_interface %s requested',
                  default_route_interface)
    else:
        LOG.debug(
            'no default_route_interface designated, will attempt to select dynamically')
    if not device_discovery_interface:
        device_discovery_interface = DEFAULT_DEVICE_DISCOVERY_INTERFACE
    LOG.debug('setting device_discovery_interface to %s', device_discovery_interface)
    # resolved resources
    links, selfips, routes, services = {}, {}, {}, {}
    m_ip = m_nm = m_gw = None
    m_mtu = 1500
    dns_services = []
    ntp_services = []
    number_of_default_routes = 0
    onenic = bigiq_onboard_utils.is_onenic()
    # resolve data from mgmt interface DHCPv4 lease
    try:
        mgmt_data = bigiq_onboard_utils.process_dhcp4_lease(
            bigiq_onboard_utils.MGMT_DHCP_LEASE_FILE)
        if 'fixed-address' in mgmt_data:
            m_ip = mgmt_data['fixed-address']
        if 'subnet-mask' in mgmt_data:
            m_nm = mgmt_data['subnet-mask']
        if 'interface-mtu' in mgmt_data:
            m_mtu = int(mgmt_data['interface-mtu'])
        if 'routers' in mgmt_data:
            m_gw = mgmt_data['routers']
        if 'host-name' in mgmt_data:
            services['hostname'] = mgmt_data['host-name']
        if 'domain-name' in mgmt_data:
            services['domainname'] = mgmt_data['domain-name']
        if 'domain-name-servers' in mgmt_data:
            LOG.debug('discovered DNS service configuration')
            dns_servers = mgmt_data['domain-name-servers']
            if ',' in dns_servers:
                dns_servers = dns_servers.replace(',', ' ')
            for dns in dns_servers.split(' '):
                dns_services.append(dns)
        if 'ntp-servers' in mgmt_data:
            LOG.debug('discovered NTP service configuration')
            ntp_servers = mgmt_data['ntp-servers']
            if ',' in ntp_servers:
                ntp_servers = ntp_servers.replace(',', ' ')
            for ntp in ntp_servers.split(' '):
                ntp_services.append(ntp)
    except Exception as err:
        LOG.error(
            'exception in processing mgmt DHCPv4 lease file: %s', err)
    bigiq_onboard_utils.force_tmm_down()
    for interface in get_linux_interfaces():
        if interface:
            int_index = int(interface[3:])
            tmm_interface_name = '1.' + str(int_index)
            net_name = 'net_%s' % tmm_interface_name
            net_name = net_name.replace('.', '_')
            links[tmm_interface_name] = {'net_name': net_name, 'mtu': 1500, 'interface': tmm_interface_name, 'route_domain': 0,
                                         'interface_index': int_index, 'segmentation_id': 4094-int_index, 'tagged': False}
            s_ip = s_nm = s_gw = s_routes = None
            try:
                if bigiq_onboard_utils.make_dhcp4_request(interface, dhcp_timeout):
                    interface_data = bigiq_onboard_utils.process_dhcp4_lease(
                        interface)
                    if 'fixed-address' in interface_data:
                        s_ip = interface_data['fixed-address']
                    if 'subnet-mask' in interface_data:
                        s_nm = interface_data['subnet-mask']
                    if 'routers' in interface_data:
                        s_gw = interface_data['routers']
                    if 'classless-static-routes' in interface_data:
                        s_routes = interface_data['classless-static-routes']
                    s_mtu = 1500
                    if 'interface-mtu' in interface_data:
                        s_mtu = interface_data['interface-mtu']
                    routes[tmm_interface_name] = []
                    use_rd_on_this_link = True
                    if s_ip:
                        # vlans
                        links[tmm_interface_name]['mtu'] = s_mtu
                        # selfips
                        selfip_name = 'selfip_%s' % tmm_interface_name
                        selfip_name = selfip_name.replace('.', '_')
                        selfips[tmm_interface_name] = {'selfip_name': selfip_name, 'net_name': net_name,
                                                       'ip_address': s_ip, 'netmask': s_nm}
                        # default gateway from DHCPv4
                        if s_gw and s_gw != m_gw:
                            route = {}
                            inject_route = True
                            route['use_rd'] = True
                            route['exclude'] = False
                            if default_route_interface == links[tmm_interface_name]['interface']:
                                LOG.debug(
                                    'default_route_interface discovered with DHCPv4 as interface: %s gw: %s',
                                    links[tmm_interface_name]['interface'], s_gw
                                )
                                route['use_rd'] = False
                                number_of_default_routes += 1
                            if device_discovery_interface == links[tmm_interface_name]['interface']:
                                LOG.debug(
                                    'device_discovery_interface discovered with DHCPv4 as link: %s', tmm_interface_name)
                                route['use_rd'] = False
                                if not default_route_interface == device_discovery_interface:
                                    inject_route = False
                            if (not default_route_interface) and (number_of_default_routes == 0 and inject_route):
                                LOG.debug(
                                    'dynamically setting default_route_interface with DHCPv4 interface: %s gw: %s',
                                    links[tmm_interface_name]['interface'], s_gw
                                )
                                route['use_rd'] = False
                                use_rd_on_this_link = False
                                number_of_default_routes += 1
                            route['route_name'] = net_name + '_default_gw'
                            route['network'] = '0.0.0.0'
                            route['netmask'] = '0.0.0.0'
                            route['gateway'] = s_gw
                            if inject_route and inject_routes:
                                routes[tmm_interface_name].append(route)
                         # resolve static routes
                        for route in bigiq_onboard_utils.process_dhcp4_routes(s_routes):
                            route['use_rd'] = True
                            route['exclude'] = False
                            if default_route_interface == links[tmm_interface_name]['interface']:
                                route['use_rd'] = False
                            if device_discovery_interface == links[tmm_interface_name]['interface']:
                                route['use_rd'] = False
                            if not use_rd_on_this_link:
                                route['use_rd'] = False
                            if inject_routes:
                                routes[tmm_interface_name].append(route)
                    else:
                        if default_route_interface == links[tmm_interface_name]['interface']:
                            LOG.warn(
                                'the requested default_route_interface self IP could not be resolved')
                        if device_discovery_interface == links[tmm_interface_name]['interface']:
                            LOG.warn(
                                'the requested device_discovery_interface self IP could not be resolved')
            except Exception as err:
                LOG.error(
                    'exception processing DHCPv4 for interface %s - %s', interface, err)
    if rd_enabled:
        LOG.debug('decorating route domains')
        for tmm_int in routes:
            for route in routes[tmm_int]:
                if route['use_rd']:
                    r_dom = str(links[tmm_int]['segmentation_id'])
                    links[tmm_int]['route_domain'] = r_dom
                    if selfips[tmm_int]['ip_address'].find('%') < 0:
                        selfips[tmm_int]['ip_address'] = selfips[tmm_int]['ip_address'] + '%' + r_dom
                    route['route_name'] = route['route_name'] + '_' + r_dom
                    route['network'] = route['network'] + '%' + r_dom
                    route['gateway'] = route['gateway'] + '%' + r_dom
    else:
        for tmm_int in routes:
            for route in routes[tmm_int]:
                if route['use_rd'] and (route['network'] == '0.0.0.0' or route['network'] == '::'):
                    LOG.warn(
                        'excluding default route on link %s because route domains disabled', tmm_int)
                    route['exclude'] = True

    LOG.debug('resolving service resources')
    if 'hostname' not in services:
        LOG.warn('forcing device hostname to: bigip')
        services['hostname'] = 'bigip'
    if 'domainname' not in services:
        LOG.warn('forcing device domainname to .local')
        services['domainname'] = 'local'
    declared_hostname = "%s.%s" % (
        services['hostname'], services['domainname'])
    if len(declared_hostname) > 64:
        max_hostname = 63 - len(services['domainname'])
        services['hostname'] = services['hostname'][0:max_hostname]
    if dns_services:
        services['dns_services'] = dns_services
    else:
        services['dns_services'] = DEFAULT_DNS_SERVERS
    if ntp_services:
        services['ntp_services'] = ntp_services
    else:
        services['ntp_services'] = DEFAULT_NTP_SERVERS

    bigiq_onboard_utils.start_tmm()
    return {'mgmt_address': m_ip,
            'mgmt_netmask': m_nm,
            'mgmt_gateway': m_gw,
            'mgmt_mtu': m_mtu,
            'device_discovery_interface': device_discovery_interface,
            'default_route_interface': default_route_interface,
            'links': links,
            'selfips': selfips,
            'routes': routes,
            'services': services}


def create_mgmt_init_script(resources):
    """Create initialization scripts for the mgmt interface"""
    LOG.debug('writing out pre declaration mgmt scripts')
    LOG.debug('mmgt ip %s/%s',
              resources['mgmt_address'], resources['mgmt_netmask'])
    if resources['mgmt_gateway']:
        LOG.debug('mmgt gw %s', resources['mgmt_gateway'])
    tmsh_cmd_dir_exists()
    mgmt_onboard_script = TMSH_CMD_FILE_DIR + '/001_mgmt_setup.sh'
    # write out management network configuration
    with open(mgmt_onboard_script, 'w') as mgmt_script:
        mgmt_script.write("#!/bin/bash\n")
        mgmt_script.write("echo 'starting mgmt network provisioning'\n")
        mgmt_script.write(
            "tmsh modify sys global-settings mgmt-dhcp disabled\n")
        mgmt_script.write("sleep 5\n")
        mgmt_script.write(
            "tmsh create sys management-ip %s/%s\n" % (resources['mgmt_address'],
                                                       resources['mgmt_netmask']))
        if resources['mgmt_gateway']:
            mgmt_script.write(
                "tmsh create sys management-route default gateway %s\n" % resources['mgmt_gateway'])
        mgmt_script.write("ip link set eth0 mtu %s\n" %
                          resources['mgmt_mtu'])
        mgmt_script.write(
            "echo 'ip link set eth0 mtu %s' >> /config/startup\n" % resources['mgmt_mtu'])
        mgmt_script.write(
            "echo 'mgmt interface configured: %s/%s'\n" % (resources['mgmt_address'],
                                                           resources['mgmt_netmask']))


def create_tmm_net_init_script(resources):
    """Create the initialization script for TMM network interfaces"""
    LOG.debug('writing out non declarative network provisioning scripts')
    network_onboard_script = TMSH_CMD_FILE_DIR + '/002_network_setup.sh'
    with open(network_onboard_script, 'w') as net_script:
        net_script.write("#!/bin/bash\n")
        net_script.write("echo 'starting network provisioning'\n")
        # write out L2 network configuration
        for l_id in resources['links']:
            link = resources['links'][l_id]
            if not link['tagged']:
                net_script.write("tmsh create net vlan %s mtu %s interfaces replace-all-with { %s } tag %s\n" % (
                    link['net_name'], link['mtu'], link['interface'], link['segmentation_id']))
            else:
                net_script.write("tmsh create net vlan %s mtu %s interfaces replace-all-with { %s { tagged } } tag %s\n" % (
                    link['net_name'], link['mtu'], link['interface'], link['segmentation_id']))
            if link['route_domain'] > 0:
                net_script.write("tmsh create net route-domain %s { id %s vlans add { %s } }\n" % (
                    link['route_domain'], link['route_domain'], link['net_name']))
        # write out L3 network configuration
        for n_link in resources['selfips']:
            selfip = resources['selfips'][n_link]
            net_script.write("tmsh create net self %s address %s/%s vlan %s allow-service all\n" %
                             (selfip['selfip_name'], selfip['ip_address'], selfip['netmask'], selfip['net_name']))
        for n_link in resources['routes']:
            for route in resources['routes'][n_link]:
                if not route['exclude']:
                    net_script.write("tmsh create net route %s network %s/%s gw %s\n" % (
                        route['route_name'],
                        route['network'],
                        route['netmask'],
                        route['gateway']))
        net_script.write("echo 'networking configured'\n")


def creat_services_init_script(resources):
    """Create the initialization script for services configurations"""
    LOG.debug('writing out services initialization script')
    services_onboard_script = TMSH_CMD_FILE_DIR + '/003_services_setup.sh'
    if os.path.isfile(services_onboard_script):
        bigiq_onboard_utils.del_file(services_onboard_script)
    with open(services_onboard_script, 'w') as services_script:
        services = resources['services']
        services_script.write("tmsh modify sys global-settings hostname %s.%s\n" %
                              (services['hostname'], services['domainname']))
        services_script.write(
            "tmsh modify sys management-dhcp sys-mgmt-dhcp-config request-options delete { host-name }\n")
        services_script.write(
            "tmsh modify sys dns search replace-all-with { %s }\n" % services['domainname'])
        services_script.write(
            "tmsh modify sys dns name-servers replace-all-with { %s }\n" % " ".join(services['dns_services']))
        services_script.write(
            "tmsh modify sys management-dhcp sys-mgmt-dhcp-config request-options delete { domain-name-servers domain-name }\n")
        services_script.write(
            "tmsh modify sys ntp timezone %s\n" % DEFAULT_TIMEZONE)
        services_script.write(
            "tmsh modify sys ntp servers replace-all-with { %s }\n" % " ".join(services['ntp_services']))
        services_script.write(
            "tmsh modify sys management-dhcp sys-mgmt-dhcp-config request-options delete { ntp-servers }\n")
        services_script.write("echo 'services configured'\n")


def create_bigiq_init_script(resources):
    """Create the initialization script for BIG-IQ configurations"""
    # write out required CMI settings
    LOG.debug('writing out device discovery initialization script')
    sync_onboard_script = TMSH_CMD_FILE_DIR + '/004_configsync_setup.sh'
    if os.path.isfile(sync_onboard_script):
        bigiq_onboard_utils.del_file(sync_onboard_script)
    with open(sync_onboard_script, 'w') as cmi_script:
        services = resources['services']
        cmi_script.write("tmsh mv cm device $(tmsh list cm device | grep 'cm device' | cut -d ' ' -f3) %s\n" %
                         services['hostname'])
        if resources['onenic']:
            cmi_script.write(
                "tmsh show net self self_1nic > /dev/null 2>&1; while [ $? -ne 0 ]; do sleep 2; tmsh show net self self_1nic > /dev/null 2>&1; done\n")
            cmi_script.write(
                "tmsh modify /sys db configsync.allowmanagement value enable\n")
            cmi_script.write("tmsh modify cm device %s configsync-ip %s unicast-address { { effective-ip %s effective-port 1026 ip %s } }\n" % (
                services['hostname'], resources['mgmt_address'], resources['mgmt_address'], resources['mgmt_address']))
        else:
            for link in resources['links']:
                if resources['links'][link]['interface'] == resources['configsync_interface']:
                    if link in resources['selfips']:
                        selfip = resources['selfips'][link]
                        sip = selfip['ip_address']
                        if not selfip['netmask']:
                            sip = selfip['ip_address'].split('/')[0]
                        cmi_script.write("tmsh show net self %s > /dev/null 2>&1; while [ $? -ne 0 ]; do sleep 2; tmsh show net self %s > /dev/null 2>&1; done\n" % (
                            selfip['selfip_name'], selfip['selfip_name']))
                        cmi_script.write("tmsh modify cm device %s configsync-ip %s unicast-address { { effective-ip %s effective-port 1026 ip %s } { effective-ip management-ip effective-port 1026 ip management-ip } } mirror-ip %s\n" % (
                            services['hostname'], sip, sip, sip, sip))
                    else:
                        LOG.warn('configsync configuration incomplete')
            cmi_script.write(
                "echo 'CMI configsync interface configured'\n")
        return resources


def create_post_onboard_script(post_onboard_commands):
    """Create the post onboard command script"""
    if post_onboard_commands:
        post_onboard_commands_script = POST_ONBOARD_CMD_FILE_DIR + \
            '/001_post_onboard_commands.sh'
        if os.path.isfile(post_onboard_commands_script):
            bigiq_onboard_utils.del_file(post_onboard_commands_script)
        with open(post_onboard_commands_script, 'w') as pob_script:
            pob_script.write("#!/bin/bash\n")
            pob_script.write(
                "echo 'starting post onboarding commands provisioning'\n\n")
            pob_script.write("cmds=(\n")
            for cmd in post_onboard_commands:
                pob_script.write("\"%s\"\n" % cmd.replace('"', r'\"'))
            pob_script.write(")\n\n")
            pob_script.write("for (( i = 0; i < ${#cmds[@]} ; i++ )); do\n")
            pob_script.write("    echo \"Running: ${cmds[$i]}\"\n")
            pob_script.write("    eval \"${cmds[$i]}\"\n")
            pob_script.write("    if [ $? -eq 1 ]; then\n")
            pob_script.write(
                "        echo \"Command: ${cmds[$i]} Failed. Stopping execution of any further commands.\"\n")
            pob_script.write("        exit 1\n")
            pob_script.write("    fi\n")
            pob_script.write("done\n\n")


def create_onboard_artifacts(resources, post_onboard_commands=None):
    """Generates all needed onboarding artifacts from metadata or the environment"""
    create_mgmt_init_script(resources)
    create_tmm_net_init_script(resources)
    creat_services_init_script(resources)
    create_bigiq_init_script(resources)
    create_post_onboard_script(post_onboard_commands)


def create_onboard():
    """Creates the initialization script for all tasks when not using f5-declarative-onboarding"""
    LOG.debug('writing out onboard initialization script')
    onboard_script = TMSH_CMD_FILE_DIR + '/onboard.sh'
    if os.path.isfile(onboard_script):
        bigiq_onboard_utils.del_file(onboard_script)
    script_files = os.listdir(TMSH_CMD_FILE_DIR)
    script_files.sort()
    with open(onboard_script, 'w') as obs:
        obs.write("#!/bin/bash\n\n")
        obs.write("function check_mcpd_up() {\n")
        obs.write("    checks=0\n")
        obs.write("    while [ $checks -lt 120 ]; do\n")
        obs.write(
            "        if tmsh -a show sys mcp-state field-fmt 2> /dev/null | grep -q running; then\n")
        obs.write("            break\n")
        obs.write("        fi\n")
        obs.write("        echo 'waiting for mcpd to reach running state'\n")
        obs.write("        let checks=checks+1\n")
        obs.write("        sleep 10\n")
        obs.write("    done\n")
        obs.write("}\n\n")
        obs.write("function check_icontrol_up() {\n")
        obs.write("    checks=0\n")
        obs.write("    while [ $checks -lt 120 ]; do\n")
        obs.write("        started=$(curl -su 'admin:' http://localhost:8100/shared/echo | grep '\"stage\":\"STARTED\"' | wc -l 2>/dev/null)\n")
        obs.write("        if [ $started == 1 ]; then\n")
        obs.write("            break\n")
        obs.write("        fi\n")
        obs.write("        echo 'waiting for iControl to start'\n")
        obs.write("        let checks=checks+1\n")
        obs.write("        sleep 10\n")
        obs.write("    done\n")
        obs.write("}\n\n")
        obs.write("function exec_phases() {\n")
        for script_file in script_files:
            obs.write("    /bin/bash %s/%s\n" %
                      (TMSH_CMD_FILE_DIR, script_file))
        obs.write("    echo 1 > " + ONBOARD_COMPLETE_FLAG_FILE + '\n')
        obs.write("}\n\n")
        obs.write("check_mcpd_up\n")
        obs.write("exec_phases\n")
        obs.write("tmsh save sys config base\n")
        obs.write("bigstart restart\n")
        obs.write("check_mcpd_up\n")
        obs.write("check_icontrol_up\n")
    os.chmod(onboard_script, 0775)


def create_post_onboard():
    """Creates the initialization script for all post onboarding scripts"""
    LOG.debug('writing out post onboard initialization script')
    onboard_script = POST_ONBOARD_CMD_FILE_DIR + '/onboard.sh'
    if os.path.isfile(onboard_script):
        bigiq_onboard_utils.del_file(onboard_script)
    script_files = os.listdir(POST_ONBOARD_CMD_FILE_DIR)
    script_files.sort()
    with open(onboard_script, 'w') as obs:
        obs.write("#!/bin/bash\n\n")
        obs.write("function check_mcpd_up() {\n")
        obs.write("    checks=0\n")
        obs.write("    while [ $checks -lt 120 ]; do\n")
        obs.write(
            "        if tmsh -a show sys mcp-state field-fmt 2> /dev/null | grep -q running; then\n")
        obs.write("            break\n")
        obs.write("        fi\n")
        obs.write("        echo 'waiting for mcpd to reach running state'\n")
        obs.write("        let checks=checks+1\n")
        obs.write("        sleep 10\n")
        obs.write("    done\n")
        obs.write("}\n\n")
        obs.write("function check_icontrol_up() {\n")
        obs.write("    checks=0\n")
        obs.write("    while [ $checks -lt 120 ]; do\n")
        obs.write("        started=$(curl -su 'admin:' http://localhost:8100/shared/echo | grep '\"stage\":\"STARTED\"' | wc -l 2>/dev/null)\n")
        obs.write("        if [ $started == 1 ]; then\n")
        obs.write("            break\n")
        obs.write("        fi\n")
        obs.write("        echo 'waiting for iControl to start'\n")
        obs.write("        let checks=checks+1\n")
        obs.write("        sleep 10\n")
        obs.write("    done\n")
        obs.write("}\n\n")
        obs.write("function exec_phases() {\n")
        for script_file in script_files:
            obs.write("    /bin/bash %s/%s\n" %
                      (POST_ONBOARD_CMD_FILE_DIR, script_file))
        obs.write("    echo 1 > " + POST_ONBOARD_FLAG_FILE + '\n')
        obs.write("}\n\n")
        obs.write("check_mcpd_up\n")
        obs.write("check_icontrol_up\n")
        obs.write("exec_phases\n")
    os.chmod(onboard_script, 0775)


def is_startup_injected(script_name):
    """ check if script is injected into /config/startup """
    injected_already = subprocess.Popen(
        "cat /config/startup | grep " + script_name + " | wc -l",
        stdout=subprocess.PIPE, shell=True
    ).communicate()[0].replace('\n', '')
    if injected_already == '0':
        return False
    return True


def run_post_onboard_commands():
    """ run post onboard commands """
    post_onboard_script = POST_ONBOARD_CMD_FILE_DIR + '/onboard.sh'
    with open(LOG_FILE, 'a+') as onboardlog:
        LOG.info('running post onboard script')
        subprocess.call(['nohup', 'sh', '-c', post_onboard_script, '&'],
                        stdout=onboardlog, stderr=onboardlog)
        end_time = time.time() + ONBOARD_TIMEOUT
        while (end_time - time.time()) > 0:
            if not os.path.exists(POST_ONBOARD_FLAG_FILE):
                time.sleep(1)
            else:
                end_time = 0
        if os.path.exists(POST_ONBOARD_FLAG_FILE):
            LOG.error('post onboard commands did not complete properly')
            return False
        return True


def onboard(post_onboard_enabled, phone_home_url,
            phone_home_url_verify_tls, phone_home_cli):
    """Implements the onboarding business logic"""
    # initialize pre declarative onboarding tasks
    onboard_script = TMSH_CMD_FILE_DIR + '/onboard.sh'
    with open(LOG_FILE, 'a+') as onboardlog:
        LOG.info('running pre declared onboarding scripts')
        subprocess.call(['nohup', 'sh', '-c', onboard_script,
                         '&'], stdout=onboardlog, stderr=onboardlog)
    end_time = time.time() + ONBOARD_TIMEOUT
    while (end_time - time.time()) > 0:
        if not os.path.exists(ONBOARD_COMPLETE_FLAG_FILE):
            time.sleep(1)
        else:
            end_time = 0
        onboard_status = SUCCESS
    else:
        onboard_status = ERROR
        LOG.error('configuration did not complete')

    if phone_home_url:
        bigiq_onboard_utils.phone_home(
            phone_home_url, onboard_status, phone_home_url_verify_tls)
    if phone_home_cli and onboard_status == SUCCESS:
        bigiq_onboard_utils.run_cmd(phone_home_cli)
    LOG.info('onboarding ended with status: %s', onboard_status)


def clean():
    """Remove any onboarding artifacts"""
    bigiq_onboard_utils.clean()


def handle(name, userdata, cloud, log, args):
    """Cloud-init processing function"""
    tag = MODULE_NAME
    enabled = False
    if tag in userdata:
        try:
            enabled = bool(userdata[tag]['enabled'])
        except Exception:
            LOG.error("%s missing enabled attribute", tag)
            return
    if enabled:
        keys = []
        if "ssh_authorized_keys" in userdata:
            cfgkeys = userdata["ssh_authorized_keys"]
            keys.extend(cfgkeys)
        rd_enabled = True
        if 'rd_enabled' in userdata[tag]:
            rd_enabled = bool(userdata[tag]['rd_enabled'])
        default_route_interface = None
        if 'default_route_interface' in userdata[tag]:
            default_route_interface = str(
                userdata[tag]['default_route_interface'])
        device_discovery_interface = None
        if 'device_discovery_interface' in userdata[tag]:
            device_discovery_interface = str(
                userdata[tag]['device_discovery_interface'])
        dhcp_timeout = 120
        if 'dhcp_timeout' in userdata[tag]:
            dhcp_timeout = int(
                userdata[tag]['dhcp_timeout'])
        inject_routes = True
        if 'inject_routes' in userdata[tag]:
            inject_routes = bool(
                userdata[tag]['inject_routes'])
        post_onboard_enabled = False
        if 'post_onboard_enabled' in userdata[tag]:
            post_onboard_enabled = bool(
                userdata[tag]['post_onboard_enabled'])
        post_onboard_commands = []
        if 'post_onboard_commands' in userdata[tag]:
            post_onboard_commands = userdata[tag]['post_onboard_commands']
        inject_public_ssh_keys(log, keys)
        resources = resolve_resources(rd_enabled,
                                      default_route_interface,
                                      device_discovery_interface,
                                      inject_routes,
                                      dhcp_timeout)
        LOG.debug('resolved config resources: %s', resources)
        create_onboard_artifacts(resources, post_onboard_commands)
        create_post_onboard()

        phone_home_url = None
        if 'phone_home_url' in userdata[tag]:
            phone_home_url = userdata[tag]['phone_home_url']

        phone_home_url_verify_tls = True
        if 'phone_home_url_verify_tls' in userdata[tag]:
            phone_home_url_verify_tls = userdata[tag]['phone_home_url_verify_tls']

        phone_home_cli = None
        if 'phone_home_cli' in userdata[tag]:
            phone_home_cli = userdata[tag]['phone_home_cli']

        try:
            onboard(post_onboard_enabled,
                    phone_home_url, phone_home_url_verify_tls,
                    phone_home_cli)
        except Exception as err:
            LOG.error("onboard exception - %s", err)
        try:
            bigiq_onboard_utils.clean()
        except Exception as err:
            LOG.error('onboard cleanup exception - %s', err)


if __name__ == "__main__":
    # Running the cloud-init module from the CLI python interpreter
    bigiq_onboard_utils.onboard_configdrive()
    USERDATA_FILE = '/opt/cloud/instance/user-data.txt'
    USERDATA_CONFIG = {
        MODULE_NAME: {
            'enabled': True
        }
    }
    if os.path.exists(USERDATA_FILE):
        USERDATA_CONFIG = bigiq_onboard_utils.read_conf(USERDATA_FILE)
    handle(MODULE_NAME, USERDATA_CONFIG, None, logging, [])