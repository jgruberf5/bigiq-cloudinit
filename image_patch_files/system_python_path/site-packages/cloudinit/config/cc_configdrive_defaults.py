#!/usr/bin/env python

# coding=utf-8
# pylint: disable=broad-except,unused-argument,line-too-long
# Copyright (c) 2016-2018, F5 Networks, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
"""
This module reads OpenStack metadata and vendor_data
and sets default system values.
"""
import json
import logging
import os
import string
import random

from cloudinit import bigiq_onboard_utils

# constants
MODULE_NAME = 'configdrive_defaults'

OUT_DIR = '/var/lib/cloud/' + MODULE_NAME
EXEC_DIR = '/opt/cloud/' + MODULE_NAME

LOG_FILE = '/var/log/f5-cloudinit.log'

DATASOURCE_FILE = '/opt/cloud/instance/datasource'
META_DATA_FILE = '/opt/cloud/instance/meta_data.json'

bigiq_onboard_utils.touch_file(LOG_FILE)

LOG = logging.getLogger(MODULE_NAME)
LOG.setLevel(logging.DEBUG)
FORMATTER = logging.Formatter(
    '%(asctime)s - %(name)s - %(levelname)s - %(message)s')
LOGFILE = logging.FileHandler(LOG_FILE)
LOGFILE.setLevel(logging.DEBUG)
LOGFILE.setFormatter(FORMATTER)
LOG.addHandler(LOGFILE)


def handle(name, cloud_config, cloud, log, args):
    """Cloud-init processing function"""
    tag = MODULE_NAME
    # is this a NoCloud sourced cloudinit
    is_configdrive = False
    if os.path.exists(DATASOURCE_FILE):
        with open(DATASOURCE_FILE, 'r') as dsf:
            ds = dsf.read()
            if ds.find('ConfigDrive') > 0:
                is_configdrive = True
    if is_configdrive:
        # force /PLATFORM to KVM generic
        with open('/PLATFORM', 'w') as platform:
            platform.write(
                "platform=Z100\nfamily=0xC0000000\nhost=Z100\nsystype=0x71\n")
        keys = []
        if os.path.isfile(META_DATA_FILE):
            LOG.debug('Looking for SSH keys from OpenStack meta_data file',
                      META_DATA_FILE)
            os_md = json.load(open(META_DATA_FILE))
            for k in os_md['keys']:
                LOG.debug('injecting %s key from OpenStack meta_data',
                          key['name'])
                keys.append(k['data'])
        if keys:
            bigiq_onboard_utils.inject_public_ssh_keys(keys)
            # randomize root and admin accounts
            LOG.debug('randomizing default account passwords')
            root_password = 'root:' + ''.join([
                random.choice(string.ascii_letters + string.digits)
                for n in range(32)
            ]) + '\n'
            try:
                bigiq_onboard_utils.set_password('root', root_password)
            except Exception as e:
                LOG.error('failed to randomize password for root user: %s', e)
            admin_password = 'admin:' + ''.join([
                random.choice(string.ascii_letters + string.digits)
                for n in range(32)
            ]) + '\n'
            try:
                bigiq_onboard_utils.set_password('admin', admin_password)
            except Exception as e:
                LOG.error('failed to randomize password for admin user: %s', e)
        bigiq_onboard_utils.wait_for_mcpd()
    else:
        LOG.info('ConfigDrive data source not found')
    

if __name__ == "__main__":
    # Running the cloud-init module from the CLI python interpreter
    CLOUD_CONFIG_FILE = '/opt/cloud/instance/cloud-config.txt'
    CLOUD_CONFIG = {MODULE_NAME: {'enabled': True}}
    if os.path.exists(CLOUD_CONFIG_FILE):
        with open(CLOUD_CONFIG, 'r') as ccf:
            CLOUD_CONFIG = ccf.read()
    handle(MODULE_NAME, CLOUD_CONFIG, None, logging, [])