#!/usr/bin/env python

# coding=utf-8
# pylint: disable=broad-except,unused-argument,line-too-long
# Copyright (c) 2016-2018, F5 Networks, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

"""
This module enables the TMOS mgmt interface to be provisioned
statically through cloudinit userdata.

The module must be enabled in the userdata YAML to perform any
onboarding artifact generation or onboarding.

# cloud-config
tmos_static_mgmt:
  enabled: True
  ip: 192.168.245.100/24
  gw: 192.168.245.1
  mtu: 1450

"""
import os
import sys
import logging
import subprocess
import time

from cloudinit import bigiq_onboard_utils

MODULE_NAME = 'bigiq_static_mgmt'

OUT_DIR = '/var/lib/cloud/' + MODULE_NAME
EXEC_DIR = '/opt/cloud/' + MODULE_NAME

ONBOARD_COMPLETE_FLAG_FILE = OUT_DIR + '/ONBOARD_COMPLETE'

LOG_FILE = '/var/log/f5-cloudinit.log'

TMSH_CMD_FILE_DIR = EXEC_DIR + '/initscripts'

ONBOARD_TIMEOUT = 120

ERROR = 'ERROR'
SUCCESS = 'SUCCESS'

DEFAULT_TIMEZONE = 'UTC'

bigiq_onboard_utils.touch_file(LOG_FILE)

LOG = logging.getLogger(MODULE_NAME)
LOG.setLevel(logging.DEBUG)
FORMATTER = logging.Formatter(
    '%(asctime)s - %(name)s - %(levelname)s - %(message)s')
LOGFILE = logging.FileHandler(LOG_FILE)
LOGFILE.setLevel(logging.DEBUG)
LOGFILE.setFormatter(FORMATTER)
LOG.addHandler(LOGFILE)

SYSCMDS = bigiq_onboard_utils.SYSCMDS

def tmsh_cmd_dir_exists():
    """Ensures TMSH generated init script directory exists"""
    if not os.path.isdir(TMSH_CMD_FILE_DIR):
        os.makedirs(TMSH_CMD_FILE_DIR)
    if not os.path.isdir(OUT_DIR):
        os.makedirs(OUT_DIR)


def create_onboard_artifacts(mgmt_cidr, mgmt_gw, mgmt_mtu, hostname, nameservers,
                             searchdomain, ntpservers, post_onboard_commands):
    """Generates all needed onboarding artifacts from metadata"""
    tmsh_cmd_dir_exists()
    network_onboard_script = TMSH_CMD_FILE_DIR + '/001_mgmt_setup.sh'
    if os.path.isfile(network_onboard_script):
        bigiq_onboard_utils.del_file(network_onboard_script)
    with open(network_onboard_script, 'w') as mgmt_script:
        mgmt_script.write("#!/bin/bash\n")
        mgmt_script.write("%s 'starting static mgmt network provisioning'\n" % SYSCMDS['echo'])
        mgmt_script.write(
            "%s modify sys global-settings mgmt-dhcp disabled\n" % SYSCMDS['tmsh'])
        mgmt_script.write("%s 5\n" % SYSCMDS['sleep'])
        mgmt_script.write("%s create sys management-ip %s\n" % (SYSCMDS['tmsh'], mgmt_cidr))
        mgmt_script.write(
            "%s modify sys management-ip %s description 'provisioned by %s'\n" % (SYSCMDS['tmsh'], mgmt_cidr, MODULE_NAME))
        if mgmt_gw:
            mgmt_script.write(
                "%s create sys management-route default gateway %s\n" % (SYSCMDS['tmsh'], mgmt_gw))
        if mgmt_mtu:
            mgmt_script.write("%s link set %s mtu %s\n" % (SYSCMDS['ip'], bigiq_onboard_utils.MGMT_DEV_NAME, mgmt_mtu))
            mgmt_script.write("%s '%s link set %s mtu %s' >> /config/startup\n" % (
                SYSCMDS['echo'], SYSCMDS['ip'], bigiq_onboard_utils.MGMT_DEV_NAME, mgmt_mtu))
        if hostname:
            mgmt_script.write(
                "%s modify sys global-settings hostname %s\n" % (SYSCMDS['tmsh'], hostname))
            mgmt_script.write(
                "%s modify sys management-dhcp sys-mgmt-dhcp-config request-options delete { host-name }\n" % SYSCMDS['tmsh'])
        if nameservers:
            mgmt_script.write(
                "%s modify sys dns name-servers replace-all-with { %s }\n" % (SYSCMDS['tmsh'], " ".join(nameservers)))
            mgmt_script.write(
                "%s modify sys management-dhcp sys-mgmt-dhcp-config request-options delete { domain-name-servers }\n" % SYSCMDS['tmsh'])
        if searchdomain:
            mgmt_script.write(
                "%s modify sys dns search replace-all-with { %s }\n" % (SYSCMDS['tmsh'], searchdomain))
            mgmt_script.write(
                "%s modify sys management-dhcp sys-mgmt-dhcp-config request-options delete { domain-name }\n" % SYSCMDS['tmsh'])
        if ntpservers:
            mgmt_script.write(
                "%s modify sys ntp servers replace-all-with { %s }\n" % (SYSCMDS['tmsh'], " ".join(ntpservers)))
            mgmt_script.write(
                "%s modify sys ntp timezone %s\n" % (SYSCMDS['tmsh'], DEFAULT_TIMEZONE))
            mgmt_script.write(
                "%s modify sys management-dhcp sys-mgmt-dhcp-config request-options delete { ntp-servers }\n" % SYSCMDS['tmsh'])
        mgmt_script.write("%s 'mgmt interface configured: %s'\n" % (SYSCMDS['tmsh'], mgmt_cidr))
        mgmt_script.write("%s save sys config base\n" % SYSCMDS['tmsh'])

    if post_onboard_commands:
        post_onboard_commands_script = TMSH_CMD_FILE_DIR + '/002_post_onboard_commands.sh'
        if os.path.isfile(post_onboard_commands_script):
            bigiq_onboard_utils.del_file(post_onboard_commands_script)
        with open(post_onboard_commands_script, 'w') as pob_script:
            pob_script.write("#!/bin/bash\n")
            pob_script.write(
                "echo 'starting post onboarding commands provisioning'\n")
            pob_script.write("cmds=(\n")
            for cmd in post_onboard_commands:
                pob_script.write("\"%s\"\n" % cmd.replace('"', r'\"'))
            pob_script.write(")\n\n")
            pob_script.write("for (( i = 0; i < ${#cmds[@]} ; i++ )); do\n")
            pob_script.write("    %s \"Running: ${cmds[$i]}\"\n" % SYSCMDS['echo'])
            pob_script.write("    eval \"${cmds[$i]}\"\n")
            pob_script.write("    if [ $? -eq 1 ]; then\n")
            pob_script.write("        %s \"Command: ${cmds[$i]} Failed. Stopping execution of any further commands.\"\n" % SYSCMDS['echo'])
            pob_script.write("        exit 1\n")
            pob_script.write("    fi\n")
            pob_script.write("done\n\n")


def onboard(phone_home_url, phone_home_url_verify_tls, phone_home_cli):
    """Implements the onboarding business logic"""
    onboard_script = TMSH_CMD_FILE_DIR + '/onboard.sh'
    if os.path.isfile(onboard_script):
        bigiq_onboard_utils.del_file(onboard_script)
    script_files = os.listdir(TMSH_CMD_FILE_DIR)
    script_files.sort()
    with open(onboard_script, 'w') as obs:
        obs.write("#!/bin/bash\n\n")
        obs.write("function check_mcpd_up() {\n")
        obs.write("    checks=0\n")
        obs.write("    while [ $checks -lt 120 ]; do\n")
        obs.write("        if %s -a show sys mcp-state field-fmt 2> /dev/null | %s -q running; then\n" % (SYSCMDS['tmsh'], SYSCMDS['grep']))
        obs.write("            break\n")
        obs.write("        fi\n")
        obs.write("        %s 'waiting for mcpd to reach running state'\n" % SYSCMDS['echo'])
        obs.write("        let checks=checks+1\n")
        obs.write("        %s 10\n" % SYSCMDS['sleep'])
        obs.write("    done\n")
        obs.write("}\n\n")
        obs.write("function exec_phases() {\n")
        for script_file in script_files:
            obs.write("    /bin/bash %s/%s\n" %
                      (TMSH_CMD_FILE_DIR, script_file))
        obs.write("}\n\n")
        obs.write("check_mcpd_up\n")
        obs.write("exec_phases\n")
        obs.write("%s 1 > %s\n" % (SYSCMDS['echo'], ONBOARD_COMPLETE_FLAG_FILE))
    os.chmod(onboard_script, 0775)
    with open(LOG_FILE, 'a+') as onboardlog:
        subprocess.call([SYSCMDS['nohup'], 'sh', '-c', onboard_script,
                         '&'], stdout=onboardlog, stderr=onboardlog)
    end_time = time.time() + ONBOARD_TIMEOUT
    while (end_time - time.time()) > 0:
        if not os.path.exists(ONBOARD_COMPLETE_FLAG_FILE):
            time.sleep(1)
        else:
            end_time = 0
    onboard_status = 'SUCCESS'

    if not os.path.exists(ONBOARD_COMPLETE_FLAG_FILE):
        LOG.error('Onboarding scripts failed to complete...exiting')
        onboard_status = ERROR

    if phone_home_url:
        bigiq_onboard_utils.phone_home(
            phone_home_url, False, False, onboard_status, phone_home_url_verify_tls)

    if phone_home_cli and onboard_status == SUCCESS:
        bigiq_onboard_utils.run_cmd(phone_home_cli)

    LOG.info('onboarding ended with status: %s', onboard_status)


def handle(name, userdata, cloud, log, args):
    """Cloud-init processing function"""
    # implement set_password module - almost!
    if 'chpasswd' in userdata and 'list' in userdata['chpasswd']:
        for user in userdata['chpasswd']['list'].splitlines():
            parts = user.split(':')
            if len(parts) > 1:
                bigiq_onboard_utils.set_password(parts[0], parts[1])
            else:
                if parts[0]:
                    bigiq_onboard_utils.disable_user(parts[0])
    else:
        # if you don't set the password, disable accounts
        bigiq_onboard_utils.disable_user('root')
        bigiq_onboard_utils.disable_user('admin')
    # module specific processing
    tag = MODULE_NAME
    enabled = False
    if tag in userdata:
        try:
            enabled = bool(userdata[tag]['enabled'])
        except Exception:
            LOG.error("%s missing enabled attribute", tag)
            return
    if enabled:
        mgmt_ip = None
        if 'ip' in userdata[tag]:
            mgmt_ip = userdata[tag]['ip']
        if not mgmt_ip:
            LOG.error("%s missing ip attribute", tag)
            return
        mgmt_netmask = None
        if 'netmask' in userdata[tag]:
            mgmt_netmask = userdata[tag]['netmask']
        mgmt_gw = None
        if 'gw' in userdata[tag]:
            mgmt_gw = userdata[tag]['gw']
        mgmt_mtu = 1500
        if 'mtu' in userdata[tag]:
            mgmt_mtu = userdata[tag]['mtu']
        hostname = None
        if 'hostname' in userdata[tag]:
            hostname = userdata[tag]['hostname']
        nameservers = []
        if 'nameservers' in userdata[tag]:
            nameservers = userdata[tag]['nameservers']
        searchdomain = None
        if 'searchdomain' in userdata[tag]:
            searchdomain = userdata[tag]['searchdomain']
        ntpservers = []
        if 'ntpservers' in userdata[tag]:
            ntpservers = userdata[tag]['ntpservers']
        post_onboard_enabled = False
        if 'post_onboard_enabled' in userdata[tag]:
            post_onboard_enabled = bool(
                userdata[tag]['post_onboard_enabled'])
        post_onboard_commands = []
        if 'post_onboard_commands' in userdata[tag] and post_onboard_enabled:
            post_onboard_commands = userdata[tag]['post_onboard_commands']
        mgmt_cidr = mgmt_ip
        if mgmt_ip.find('/') < 0:
            if not mgmt_netmask:
                LOG.error(
                    "%s ip is not in CIDR format and no netmask supplied", tag)
                return
            if bigiq_onboard_utils.is_v4(mgmt_ip):
                mgmt_nm = bigiq_onboard_utils.ipv4_cidr_from_netmask(
                    mgmt_netmask)
                mgmt_cidr = "%s/%s" % (mgmt_ip, mgmt_nm)
            else:
                mgmt_cidr = "%s/64" % mgmt_ip
        keys = []
        if "ssh_authorized_keys" in userdata:
            cfgkeys = userdata["ssh_authorized_keys"]
            keys.extend(cfgkeys)
            LOG.info('%s found ssh_authorized_keys', tag)
        bigiq_onboard_utils.inject_public_ssh_keys(keys)
        create_onboard_artifacts(mgmt_cidr, mgmt_gw, mgmt_mtu, hostname, nameservers,
                                 searchdomain, ntpservers, post_onboard_commands)
        phone_home_url = None
        if 'phone_home_url' in userdata[tag]:
            phone_home_url = userdata[tag]['phone_home_url']

        phone_home_url_verify_tls = True
        if 'phone_home_url_verify_tls' in userdata[tag]:
            phone_home_url_verify_tls = userdata[tag]['phone_home_url_verify_tls']

        phone_home_cli = None
        if 'phone_home_cli' in userdata[tag]:
            phone_home_cli = userdata[tag]['phone_home_cli']

        try:
            onboard(phone_home_url, phone_home_url_verify_tls, phone_home_cli)
        except Exception as err:
            LOG.error('onboard exception - %s', err)


if __name__ == "__main__":
    # Running the cloud-init module from the CLI python interpreter
    bigiq_onboard_utils.onboard_configdrive()
    USERDATA_FILE = '/opt/cloud/instance/user-data.txt'
    USERDATA_CONFIG = {
        MODULE_NAME: {
            'enabled': True,
            'ip': sys.argv[1],
            'gw': sys.argv[2],
            'mtu': sys.argv[3]
        }
    }
    if os.path.exists(USERDATA_FILE):
        USERDATA_CONFIG = bigiq_onboard_utils.read_conf(USERDATA_FILE)
    handle(MODULE_NAME, USERDATA_CONFIG, None, logging, [])
