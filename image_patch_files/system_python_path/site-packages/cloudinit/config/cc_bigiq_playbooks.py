#!/usr/bin/env python

# coding=utf-8
# pylint: disable=broad-except,unused-argument,line-too-long
# Copyright (c) 2016-2018, F5 Networks, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

"""
This module will execute a file injected ansible playbook.

The module must be enabled in the userdata YAML to perform any
execution of the ansible playbooks.

This module enforces a naming convention for BIG-IQ playbook
onboarding. All naming conventions are based on the 'name'
of your playbook.

The name provided must be playbook which was file injected
into the BIG-IQ disk image at the following directory:

    /var/lib/cloud/ansible/[name]

The playbook YAML should be injected into:

    /var/lib/cloud/ansible/[name]/[name].yml

Any user_data vars supplied will be written to the file:

    /var/lib/cloud/ansible/[name]/[name]_var.yml

Your playbooks yaml must start with the task:

tasks:
    - include_vars:
        file: /var/lib/cloud/ansible/[name]/[name]_vars.yml

This is how userdata is passed to your playbook.

# cloud-config
bigiq_playbooks:
  enabled: True
  playbooks:
    - name: pb_name
      vars:
        one: one
        two: two
        three: three

"""

import os
import sys
import logging
import subprocess
import time
import yaml

from cloudinit import bigiq_onboard_utils

MODULE_NAME = 'bigiq_playbooks'

OUT_DIR = '/var/lib/cloud/' + MODULE_NAME
EXEC_DIR = '/opt/cloud/' + MODULE_NAME

PLAYBOOKS_COMPLETE_FLAG_FILE = OUT_DIR + '/ONBOARD_COMPLETE'

LOG_FILE = '/var/log/f5-cloudinit.log'

TMSH_CMD_FILE_DIR = EXEC_DIR + '/initscripts'

ANSIBLE_PLAYBOOK_DIR = '/var/lib/cloud/ansible/'

ONBOARD_TIMEOUT = 900

ERROR = 'ERROR'
SUCCESS = 'SUCCESS'

DEFAULT_TIMEZONE = 'UTC'

bigiq_onboard_utils.touch_file(LOG_FILE)

LOG = logging.getLogger(MODULE_NAME)
LOG.setLevel(logging.DEBUG)
FORMATTER = logging.Formatter(
    '%(asctime)s - %(name)s - %(levelname)s - %(message)s')
LOGFILE = logging.FileHandler(LOG_FILE)
LOGFILE.setLevel(logging.DEBUG)
LOGFILE.setFormatter(FORMATTER)
LOG.addHandler(LOGFILE)

SYSCMDS = bigiq_onboard_utils.SYSCMDS

def tmsh_cmd_dir_exists():
    """Ensures TMSH generated init script directory exists"""
    if not os.path.isdir(TMSH_CMD_FILE_DIR):
        os.makedirs(TMSH_CMD_FILE_DIR)
    if not os.path.isdir(OUT_DIR):
        os.makedirs(OUT_DIR)

def create_playbook_artifact(index, name, vars):
    """Generates script to execute playbook"""
    tmsh_cmd_dir_exists()
    playbook_script = TMSH_CMD_FILE_DIR + '/' + index + '_playbook.sh'
    playbook_yaml_file = ANSIBLE_PLAYBOOK_DIR + '/' + name + '/' + name + '.yml'
    playbook_var_file = ANSIBLE_PLAYBOOK_DIR + '/' + name + '/' + name + '_var.yml'
    if os.path.isfile(pb_script):
        bigiq_onboard_utils.del_file(playbook_script)
    with open(playbook_script, 'w') as pb_script:
        pb_script.write("cd %s\n" % ANSIBLE_PLAYBOOK_DIR)
        pb_script.write("%S %s\n" % (SYSCMDS['ansible-playbook'], playbook_yaml_file))
    with open(playbook_var_file, 'w') as ansible_vars:
        ansible_vars.write('---\n\n')
        ansible_vars.write(yaml.dump(vars))

def onboard():
    """Implements the onboarding business logic"""
    onboard_script = TMSH_CMD_FILE_DIR + '/onboard.sh'
    if os.path.isfile(onboard_script):
        bigiq_onboard_utils.del_file(onboard_script)
    script_files = os.listdir(TMSH_CMD_FILE_DIR)
    script_files.sort()
    with open(onboard_script, 'w') as obs:
        obs.write("#!/bin/bash\n\n")
        obs.write("function check_mcpd_up() {\n")
        obs.write("    checks=0\n")
        obs.write("    while [ $checks -lt 120 ]; do\n")
        obs.write("        if %s -a show sys mcp-state field-fmt 2> /dev/null | %s -q running; then\n" % (SYSCMDS['tmsh'], SYSCMDS['grep']))
        obs.write("            break\n")
        obs.write("        fi\n")
        obs.write("        %s 'waiting for mcpd to reach running state'\n" % SYSCMDS['echo'])
        obs.write("        let checks=checks+1\n")
        obs.write("        %s 10\n" % SYSCMDS['sleep'])
        obs.write("    done\n")
        obs.write("}\n\n")
        obs.write("function exec_phases() {\n")
        for script_file in script_files:
            obs.write("    /bin/bash %s/%s\n" %
                      (TMSH_CMD_FILE_DIR, script_file))
        obs.write("}\n\n")
        obs.write("check_mcpd_up\n")
        obs.write("exec_phases\n")
        obs.write("%s 1 > %s\n" % (SYSCMDS['echo'], PLAYBOOKS_COMPLETE_FLAG_FILE))
    os.chmod(onboard_script, 0775)
    with open(LOG_FILE, 'a+') as onboardlog:
        subprocess.call([SYSCMDS['nohup'], 'sh', '-c', onboard_script,
                         '&'], stdout=onboardlog, stderr=onboardlog)
    end_time = time.time() + ONBOARD_TIMEOUT
    while (end_time - time.time()) > 0:
        if not os.path.exists(PLAYBOOKS_COMPLETE_FLAG_FILE):
            time.sleep(1)
        else:
            end_time = 0
    onboard_status = 'SUCCESS'

    if not os.path.exists(PLAYBOOKS_COMPLETE_FLAG_FILE):
        LOG.error('Playbook scripts failed to complete...exiting')
        onboard_status = ERROR

def handle(name, userdata, cloud, log, args):
    """Cloud-init processing function"""
    tag = MODULE_NAME
    enabled = False
    if tag in userdata:
        try:
            enabled = bool(userdata[tag]['enabled'])
        except Exception:
            LOG.error("%s missing enabled attribute", tag)
            return
    if enabled:
        playbooks = []
        if 'playbooks' in userdata[tag]:
            playbooks = userdata[tag]['playbooks']
        for indx, pb in playbooks:
            if 'name' in pb:
                vars = {}
                if 'vars' in pb:
                    vars = pb['vars']
                LOG.info('playbook %s has no vars defined' % pb['name'])
                create_playbook_artifact(indx, pb['name'], vars)
            else:
                LOG.error('skipping playbook at index %d because it has not name' % indx)
        try:
            onboard()
        except Exception as err:
            LOG.error('onboard exception - %s', err)


if __name__ == "__main__":
    # Running the cloud-init module from the CLI python interpreter
    bigiq_onboard_utils.onboard_configdrive()
    USERDATA_FILE = '/opt/cloud/instance/user-data.txt'
    USERDATA_CONFIG = {
        MODULE_NAME: {
            'enabled': False
        }
    }
    if os.path.exists(USERDATA_FILE):
        USERDATA_CONFIG = bigiq_onboard_utils.read_conf(USERDATA_FILE)
    handle(MODULE_NAME, USERDATA_CONFIG, None, logging, [])